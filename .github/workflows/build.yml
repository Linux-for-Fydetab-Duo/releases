name: Build Images

on:
  schedule:
    - cron: '0 0 * * 1'
  workflow_dispatch:

jobs:
  build:
    runs-on: [self-hosted, arch]
    steps:

      - name: Checkout Images
        uses: actions/checkout@v4
        with:
          path: images

      - name: Install dependencies
        run: |
          sudo pacman -Sy --noconfirm --needed \
          python parted btrfs-progs \
          git wget arch-install-scripts \
          unzip gptfdisk dosfstools multipath-tools
          wget https://fyde.panda-sa.ma/repo/fyde/aarch64/python-imageforge-0.0.1-1-any.pkg.tar.zst
          sudo pacman -U --noconfirm python-imageforge-0.0.1-1-any.pkg.tar.zst

      - name: Build Image
        run: |
          sudo umount -R ./work/aarch64/* || true
          sudo rm -rf /var/lib/pacman/db.lck ./out ./work
          for i in {1..3}; do
            sudo python ./images/fydetab-arch/profiledef -c ./images/fydetab-arch/ -w ./work -o ./out && break
          done

      - name: Cleanup
        if: always()
        run: |
          sudo umount -R ./work/aarch64/* || true
          sudo rm -rf ./work
        
      - name: Set current date as tag name
        id: set_tag_name
        run: echo "TAG_NAME=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
  
      - name: Create Release
        id: create_release
        run: |
          # Create a new release
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "tag_name": "${{ env.TAG_NAME }}",
              "target_commitish": "main",
              "name": "${{ env.TAG_NAME }}",
              "body": "Release description",
              "draft": false,
              "prerelease": true
            }' \
            https://api.github.com/repos/${{ github.repository }}/releases \
            | tee release_response.json
      
          # Extract the release ID
          RELEASE_ID=$(jq -r '.id' release_response.json)
      
          for file in ./out/*.img.xz; do
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              -T "$file" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=$(basename "$file")"
          done


      - name: Clean up
        run: |
          rm ./out/ -rf
